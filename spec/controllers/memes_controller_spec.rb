require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
RSpec.describe Api::V1::MemesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Meme. As you add validations to Meme, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.build(:meme).attributes
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MemesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all memes as @memes" do
      meme = Meme.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:memes)).to eq([meme])
    end
  end

  describe "GET show" do
    it "assigns the requested meme as @meme" do
      meme = Meme.create! valid_attributes
      get :show, {:id => meme.to_param}, valid_session
      expect(assigns(:meme)).to eq(meme)
    end
  end

  describe "GET new" do
    it "assigns a new meme as @meme" do
      get :new, {}, valid_session
      expect(assigns(:meme)).to be_a_new(Meme)
    end
  end

  describe "GET edit" do
    it "assigns the requested meme as @meme" do
      meme = Meme.create! valid_attributes
      get :edit, {:id => meme.to_param}, valid_session
      expect(assigns(:meme)).to eq(meme)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Meme" do
        expect {
          post :create, {:meme => valid_attributes}, valid_session
        }.to change(Meme, :count).by(1)
      end

      it "assigns a newly created meme as @meme" do
        post :create, {:meme => valid_attributes}, valid_session
        expect(assigns(:meme)).to be_a(Meme)
        expect(assigns(:meme)).to be_persisted
      end

      it "redirects to the created meme" do
        post :create, {:meme => valid_attributes}, valid_session
        expect(response).to redirect_to(Meme.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved meme as @meme" do
        post :create, {:meme => invalid_attributes}, valid_session
        expect(assigns(:meme)).to be_a_new(Meme)
      end

      it "re-renders the 'new' template" do
        post :create, {:meme => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested meme" do
        meme = Meme.create! valid_attributes
        put :update, {:id => meme.to_param, :meme => new_attributes}, valid_session
        meme.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested meme as @meme" do
        meme = Meme.create! valid_attributes
        put :update, {:id => meme.to_param, :meme => valid_attributes}, valid_session
        expect(assigns(:meme)).to eq(meme)
      end

      it "redirects to the meme" do
        meme = Meme.create! valid_attributes
        put :update, {:id => meme.to_param, :meme => valid_attributes}, valid_session
        expect(response).to redirect_to(meme)
      end
    end

    describe "with invalid params" do
      it "assigns the meme as @meme" do
        meme = Meme.create! valid_attributes
        put :update, {:id => meme.to_param, :meme => invalid_attributes}, valid_session
        expect(assigns(:meme)).to eq(meme)
      end

      it "re-renders the 'edit' template" do
        meme = Meme.create! valid_attributes
        put :update, {:id => meme.to_param, :meme => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested meme" do
      meme = Meme.create! valid_attributes
      expect {
        delete :destroy, {:id => meme.to_param}, valid_session
      }.to change(Meme, :count).by(-1)
    end

    it "redirects to the memes list" do
      meme = Meme.create! valid_attributes
      delete :destroy, {:id => meme.to_param}, valid_session
      expect(response).to redirect_to(memes_url)
    end
  end

end
